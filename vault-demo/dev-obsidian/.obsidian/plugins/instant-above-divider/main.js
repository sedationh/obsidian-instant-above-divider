/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => InstantAboveDividerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// outline-view.ts
var import_obsidian2 = require("obsidian");

// outline-service.ts
var import_obsidian = require("obsidian");

// outline-parser.ts
var OutlineParser = class {
  constructor(maxContentLength = 10) {
    this.maxContentLength = maxContentLength;
  }
  /**
   * 解析笔记内容，提取标题和分隔线信息
   */
  parseContent(content) {
    const lines = content.split("\n");
    const headings = [];
    const dividers = [];
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const headingMatch = line.match(/^(#{1,6})\s+(.+)$/);
      if (headingMatch) {
        const level = headingMatch[1].length;
        const title = headingMatch[2].trim();
        headings.push({
          level,
          title,
          line: i,
          ch: 0
        });
        continue;
      }
      if (line.trim() === "---") {
        const content2 = this.extractDividerContent(lines, i);
        if (content2) {
          const level = this.calculateDividerLevel(lines, i);
          dividers.push({
            line: i,
            ch: 0,
            title: content2,
            level
            // 添加层级信息
          });
        }
      }
    }
    return {
      headings,
      dividers,
      outlineItems: []
    };
  }
  /**
   * 提取分隔线后的内容
   */
  extractDividerContent(lines, dividerIndex) {
    for (let i = dividerIndex + 1; i < lines.length; i++) {
      const line = lines[i].trim();
      if (line === "")
        continue;
      if (line === "---")
        break;
      if (line.match(/^#{1,6}\s/))
        break;
      return this.getFirstNValidChars(line);
    }
    return "";
  }
  /**
   * 获取前N个有效字符
   */
  getFirstNValidChars(text) {
    const trimmed = text.trim();
    if (trimmed.length <= this.maxContentLength) {
      return trimmed;
    }
    return trimmed.substring(0, this.maxContentLength);
  }
  /**
   * 验证内容是否有效
   */
  isValidContent(content) {
    return content.trim().length > 0;
  }
  /**
   * 计算分隔线的层级
   * 分隔线的层级 = 最近标题的层级 + 1
   * 如果没有标题，则为1级
   */
  calculateDividerLevel(lines, dividerIndex) {
    for (let i = dividerIndex - 1; i >= 0; i--) {
      const line = lines[i].trim();
      if (line === "")
        continue;
      if (line === "---")
        continue;
      const headingMatch = line.match(/^(#{1,6})\s+(.+)$/);
      if (headingMatch) {
        const level = headingMatch[1].length;
        return level + 1;
      }
    }
    return 1;
  }
  /**
   * 生成唯一ID
   */
  generateId(type, line) {
    return `${type}-${line}-${Date.now()}`;
  }
};

// outline-service.ts
var OutlineService = class {
  constructor(app, maxContentLength = 10) {
    this.app = app;
    this.parser = new OutlineParser(maxContentLength);
  }
  /**
   * 生成大纲数据
   */
  generateOutline(content) {
    if (!content || content.trim() === "") {
      return [];
    }
    const parsedContent = this.parser.parseContent(content);
    const outlineItems = [];
    parsedContent.headings.forEach((heading) => {
      outlineItems.push({
        id: this.parser.generateId("heading", heading.line),
        type: "heading",
        level: heading.level,
        title: heading.title,
        line: heading.line,
        ch: heading.ch,
        isExpanded: true
      });
    });
    parsedContent.dividers.forEach((divider) => {
      if (this.parser.isValidContent(divider.title)) {
        outlineItems.push({
          id: this.parser.generateId("divider", divider.line),
          type: "divider",
          level: divider.level,
          // 使用计算出的层级
          title: divider.title,
          line: divider.line,
          ch: divider.ch,
          isExpanded: true
        });
      }
    });
    outlineItems.sort((a, b) => a.line - b.line);
    return outlineItems;
  }
  /**
   * 获取当前笔记的大纲
   */
  getOutlineForCurrentNote() {
    console.log("OutlineService: \u5F00\u59CB\u83B7\u53D6\u5F53\u524D\u7B14\u8BB0\u5927\u7EB2");
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!activeView) {
      console.log("OutlineService: \u6CA1\u6709\u627E\u5230\u6D3B\u52A8\u7684 Markdown \u89C6\u56FE");
      return [];
    }
    const editor = activeView.editor;
    const content = editor.getValue();
    console.log("OutlineService: \u83B7\u53D6\u5230\u5185\u5BB9\u957F\u5EA6:", content.length);
    console.log(
      "OutlineService: \u5185\u5BB9\u9884\u89C8:",
      content.substring(0, 100) + "..."
    );
    const outline = this.generateOutline(content);
    console.log("OutlineService: \u751F\u6210\u5927\u7EB2\u9879\u76EE\u6570\u91CF:", outline.length);
    outline.forEach((item, index) => {
      console.log(
        `OutlineService: \u9879\u76EE ${index + 1}: [${item.type}] ${item.title} (\u5C42\u7EA7: ${item.level}, \u884C: ${item.line})`
      );
    });
    return outline;
  }
  /**
   * 导航到指定位置
   */
  navigateToPosition(editor, line, ch) {
    try {
      console.log("OutlineService: \u5F00\u59CB\u5BFC\u822A\u5230\u4F4D\u7F6E:", line, ch);
      const lineCount = editor.lineCount();
      if (line < 0 || line >= lineCount) {
        console.error(
          "OutlineService: \u65E0\u6548\u7684\u884C\u53F7:",
          line,
          "\u603B\u884C\u6570:",
          lineCount
        );
        return;
      }
      const lineContent = editor.getLine(line);
      if (lineContent && ch > lineContent.length) {
        ch = lineContent.length;
        console.log("OutlineService: \u5217\u53F7\u8C03\u6574\u5230\u884C\u5C3E:", ch);
      }
      editor.setCursor(line, ch);
      console.log("OutlineService: \u5149\u6807\u4F4D\u7F6E\u5DF2\u8BBE\u7F6E\u5230:", line, ch);
      editor.focus();
      console.log("OutlineService: \u7F16\u8F91\u5668\u5DF2\u805A\u7126");
      editor.scrollIntoView(
        { from: { line, ch }, to: { line, ch } },
        true
      );
      console.log("OutlineService: \u89C6\u56FE\u5DF2\u6EDA\u52A8\u5230\u76EE\u6807\u4F4D\u7F6E");
    } catch (error) {
      console.error("OutlineService: \u5BFC\u822A\u5931\u8D25:", error);
    }
  }
  /**
   * 导航到大纲项目
   */
  navigateToOutlineItem(editor, item) {
    console.log(
      "OutlineService: \u5BFC\u822A\u5230\u5927\u7EB2\u9879\u76EE:",
      item.title,
      "\u7C7B\u578B:",
      item.type
    );
    let targetLine = item.line;
    let targetCh = item.ch;
    if (item.type === "heading") {
      const lineContent = editor.getLine(item.line);
      if (lineContent) {
        const match = lineContent.match(/^(#{1,6})\s+(.+)$/);
        if (match) {
          targetCh = match[1].length + 1;
          console.log(
            "OutlineService: \u6807\u9898\u5149\u6807\u4F4D\u7F6E\u8C03\u6574\u5230:",
            targetCh
          );
        }
      }
    } else if (item.type === "divider") {
      const lines = editor.getValue().split("\n");
      const content = this.parser.extractDividerContent(lines, item.line);
      if (content) {
        for (let i = item.line + 1; i < lines.length; i++) {
          const line = lines[i].trim();
          if (line && line !== "---" && !line.match(/^#{1,6}\s/)) {
            targetLine = i;
            targetCh = 0;
            console.log(
              "OutlineService: \u5206\u9694\u7EBF\u5149\u6807\u4F4D\u7F6E\u8C03\u6574\u5230\u884C:",
              targetLine
            );
            break;
          }
        }
      }
    }
    this.navigateToPosition(editor, targetLine, targetCh);
  }
};

// outline-view.ts
var OUTLINE_VIEW_TYPE = "outline-view";
var OutlineView = class extends import_obsidian2.ItemView {
  constructor(leaf, app, maxContentLength = 10) {
    super(leaf);
    this.outlineItems = [];
    this.outlineService = new OutlineService(app, maxContentLength);
  }
  getViewType() {
    return OUTLINE_VIEW_TYPE;
  }
  getDisplayText() {
    return "Outline";
  }
  getIcon() {
    return "list-tree";
  }
  async onOpen() {
    const container = this.contentEl;
    container.empty();
    this.updateOutline();
  }
  /**
   * 渲染大纲界面
   */
  render(outlineItems) {
    console.log(
      "OutlineView: \u5F00\u59CB\u6E32\u67D3\u5927\u7EB2\uFF0C\u9879\u76EE\u6570\u91CF:",
      (outlineItems == null ? void 0 : outlineItems.length) || this.outlineItems.length
    );
    if (outlineItems) {
      this.outlineItems = outlineItems;
    }
    const container = this.contentEl;
    const contentEl = container.querySelector(".outline-content");
    if (contentEl) {
      contentEl.remove();
    }
    const contentContainer = container.createDiv("outline-content");
    if (this.outlineItems.length === 0) {
      contentContainer.createEl("p", {
        text: "No outline content found. Add headings (# ## ###) or dividers (---) to your note.",
        cls: "outline-empty"
      });
      console.log("OutlineView: \u6E32\u67D3\u7A7A\u5185\u5BB9\u63D0\u793A");
      return;
    }
    this.outlineItems.forEach((item) => {
      this.renderOutlineItem(contentContainer, item);
    });
  }
  /**
   * 渲染单个大纲项目
   */
  renderOutlineItem(container, item) {
    const itemEl = container.createDiv("outline-item");
    itemEl.setAttribute("data-type", item.type);
    itemEl.setAttribute("data-level", item.level.toString());
    const iconEl = itemEl.createSpan("outline-item-icon");
    if (item.type === "heading") {
      iconEl.innerHTML = `H${item.level}`;
    } else {
      iconEl.innerHTML = "\u2796";
    }
    const titleEl = itemEl.createSpan("outline-item-title");
    titleEl.textContent = item.title;
    itemEl.addEventListener("click", () => {
      this.handleItemClick(item);
    });
  }
  /**
   * 处理项目点击
   */
  handleItemClick(item) {
    console.log("OutlineView: \u70B9\u51FB\u5927\u7EB2\u9879\u76EE:", item.title, "\u884C:", item.line);
    const markdownLeaves = this.app.workspace.getLeavesOfType("markdown");
    console.log(
      "OutlineView: \u627E\u5230 Markdown \u89C6\u56FE\u6570\u91CF:",
      markdownLeaves.length
    );
    if (markdownLeaves.length === 0) {
      console.log("OutlineView: \u6CA1\u6709\u627E\u5230\u4EFB\u4F55 Markdown \u89C6\u56FE");
      return;
    }
    const markdownView = markdownLeaves[0].view;
    if (!markdownView) {
      console.log("OutlineView: Markdown \u89C6\u56FE\u65E0\u6548");
      return;
    }
    this.app.workspace.setActiveLeaf(markdownLeaves[0], { focus: true });
    const editor = markdownView.editor;
    this.outlineService.navigateToOutlineItem(editor, item);
  }
  /**
   * 显示大纲
   */
  show() {
    this.render();
  }
  /**
   * 隐藏大纲
   */
  hide() {
  }
  /**
   * 更新大纲内容
   */
  updateOutline() {
    console.log("OutlineView: \u5F00\u59CB\u66F4\u65B0\u5927\u7EB2");
    const outlineItems = this.outlineService.getOutlineForCurrentNote();
    console.log(
      "OutlineView: \u83B7\u53D6\u5230\u5927\u7EB2\u9879\u76EE\u6570\u91CF:",
      outlineItems.length,
      outlineItems
    );
    this.outlineItems = [];
    this.render(outlineItems);
    console.log("OutlineView: \u5927\u7EB2\u66F4\u65B0\u5B8C\u6210");
  }
  /**
   * 更新配置
   */
  updateConfig(maxContentLength) {
    console.log("OutlineView: \u5F00\u59CB\u66F4\u65B0\u914D\u7F6E");
    this.outlineService = new OutlineService(this.app, maxContentLength);
    console.log(
      "OutlineView: \u914D\u7F6E\u66F4\u65B0\u5B8C\u6210\uFF0CmaxContentLength:",
      maxContentLength
    );
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  respectHeadings: true,
  showOutlineInSidebar: true,
  maxContentLength: 10
};
var InstantAboveDividerPlugin = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.debounceTimer = null;
  }
  // 检测 frontmatter 并返回其结束位置
  getFrontmatterEndLine(lines) {
    if (lines.length < 2 || lines[0] !== "---") {
      return -1;
    }
    for (let i = 1; i < lines.length; i++) {
      if (lines[i] === "---") {
        return i;
      }
    }
    return -1;
  }
  async onload() {
    await this.loadSettings();
    this.registerView(
      OUTLINE_VIEW_TYPE,
      (leaf) => new OutlineView(leaf, this.app, this.settings.maxContentLength)
    );
    if (this.settings.showOutlineInSidebar) {
      setTimeout(() => {
        this.showOutline();
      }, 100);
    }
    this.registerEvent(
      this.app.workspace.on("file-open", () => {
        if (this.debounceTimer) {
          clearTimeout(this.debounceTimer);
        }
        this.debounceTimer = setTimeout(() => {
          console.log("Plugin: \u6587\u4EF6\u6253\u5F00\u4E8B\u4EF6\u89E6\u53D1");
          this.updateOutlineView();
        }, 500);
      })
    );
    this.registerEvent(
      this.app.workspace.on("editor-change", () => {
        if (this.debounceTimer) {
          clearTimeout(this.debounceTimer);
        }
        this.debounceTimer = setTimeout(() => {
          console.log("Plugin: \u7F16\u8F91\u5668\u53D8\u5316\u4E8B\u4EF6\u89E6\u53D1");
          this.updateOutlineView();
        }, 500);
      })
    );
    this.addCommand({
      id: "add-section",
      name: "Add Section",
      editorCallback: (editor) => {
        const content = editor.getValue();
        const formatterEndLine = this.getFrontmatterEndLine(
          content.split("\n")
        );
        let insertLine = formatterEndLine + 1;
        const cursorPos = editor.getCursor();
        const lines = content.split("\n");
        if (this.settings.respectHeadings) {
          for (let i = cursorPos.line - 1; i >= 0; i--) {
            if (lines[i].match(/^#{1,6}\s/)) {
              insertLine = i + 1;
              break;
            }
          }
        }
        if (insertLine === 0) {
          editor.setCursor(0, 0);
          const newContent2 = "\n\n---\n\n";
          editor.replaceRange(newContent2, {
            line: insertLine,
            ch: 0
          });
          return;
        }
        const newContent = "\n\n\n---\n";
        editor.replaceRange(newContent, { line: insertLine, ch: 0 });
        editor.setCursor(insertLine + 1, 0);
      }
    });
    this.addSettingTab(new InstantAboveDividerSettingTab(this.app, this));
  }
  /**
   * 切换大纲视图显示/隐藏
   */
  showOutline() {
    var _a;
    try {
      const existingLeaf = this.app.workspace.getLeavesOfType(OUTLINE_VIEW_TYPE);
      if (existingLeaf.length > 0) {
        const leaf = existingLeaf[0];
        if ((_a = leaf.getViewState().state) == null ? void 0 : _a.active) {
          console.log("Plugin: \u9690\u85CF\u5927\u7EB2\u89C6\u56FE");
          leaf.detach();
        } else {
          console.log("Plugin: \u6FC0\u6D3B\u5927\u7EB2\u89C6\u56FE");
          this.app.workspace.revealLeaf(leaf);
        }
      } else {
        console.log("Plugin: \u521B\u5EFA\u65B0\u7684\u5927\u7EB2\u89C6\u56FE");
        let leaf = this.app.workspace.getRightLeaf(false);
        if (!leaf) {
          leaf = this.app.workspace.getLeftLeaf(false);
        }
        if (!leaf) {
          leaf = this.app.workspace.getRightLeaf(true);
        }
        if (leaf) {
          leaf.setViewState({
            type: OUTLINE_VIEW_TYPE,
            active: true
          });
          this.app.workspace.revealLeaf(leaf);
          console.log("Plugin: \u5927\u7EB2\u89C6\u56FE\u521B\u5EFA\u6210\u529F");
        } else {
          console.error(
            "Plugin: \u65E0\u6CD5\u521B\u5EFA\u5927\u7EB2\u89C6\u56FE\uFF0C\u5DE5\u4F5C\u533A\u53EF\u80FD\u672A\u5B8C\u5168\u521D\u59CB\u5316"
          );
        }
      }
    } catch (error) {
      console.error("Plugin: \u663E\u793A\u5927\u7EB2\u89C6\u56FE\u65F6\u53D1\u751F\u9519\u8BEF:", error);
    }
  }
  /**
   * 更新所有大纲视图
   */
  updateOutlineView() {
    console.log("Plugin: \u5F00\u59CB\u66F4\u65B0\u5927\u7EB2\u89C6\u56FE");
    const outlineLeaves = this.app.workspace.getLeavesOfType(OUTLINE_VIEW_TYPE);
    console.log("Plugin: \u627E\u5230\u5927\u7EB2\u89C6\u56FE\u6570\u91CF:", outlineLeaves.length);
    const leaf = outlineLeaves[0];
    const view = leaf.view;
    if (view && typeof view.updateOutline === "function") {
      console.log(`Plugin: \u66F4\u65B0\u5927\u7EB2\u89C6\u56FE`);
      view.updateOutline();
    }
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  updateOutlineConfig() {
    const outlineLeaves = this.app.workspace.getLeavesOfType(OUTLINE_VIEW_TYPE);
    const leaf = outlineLeaves[0];
    const view = leaf.view;
    if (view && typeof view.updateConfig === "function") {
      console.log("Plugin: \u66F4\u65B0\u5927\u7EB2\u89C6\u56FE\u914D\u7F6E");
      view.updateConfig(this.settings.maxContentLength);
    }
    if (this.debounceTimer) {
      clearTimeout(this.debounceTimer);
    }
    this.debounceTimer = setTimeout(() => {
      console.log("Plugin: \u914D\u7F6E\u66F4\u65B0\u5BFC\u81F4\u5927\u7EB2\u89C6\u56FE\u66F4\u65B0");
      this.updateOutlineView();
    }, 500);
  }
};
var InstantAboveDividerSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian3.Setting(containerEl).setName("Respect Headings").setDesc(
      "When enabled, new sections will be inserted above the nearest heading"
    ).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.respectHeadings).onChange(async (value) => {
        this.plugin.settings.respectHeadings = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian3.Setting(containerEl).setName("Show Outline in Sidebar").setDesc(
      "When enabled, the outline view will be automatically opened when the plugin loads"
    ).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.showOutlineInSidebar).onChange(async (value) => {
        this.plugin.settings.showOutlineInSidebar = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian3.Setting(containerEl).setName("Max Content Length").setDesc(
      "Maximum number of characters to extract from divider content (default: 10)"
    ).addText(
      (text) => text.setPlaceholder("10").setValue(this.plugin.settings.maxContentLength.toString()).onChange(async (value) => {
        const numValue = parseInt(value) || 10;
        this.plugin.settings.maxContentLength = numValue;
        await this.plugin.saveSettings();
        this.plugin.updateOutlineConfig();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
