import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import chokidar from "chokidar";

// ESM 中获取 __dirname 的等价写法
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// 读取 manifest.json
const manifestJson = JSON.parse(fs.readFileSync("manifest.json", "utf8"));
const pluginName = manifestJson.id;

// 使用插件名称构建路径
const VAULT_PATH = path.join(
	__dirname,
	`vault-demo/dev-obsidian/.obsidian/plugins/${pluginName}`
);

const ROOT_DIR = __dirname;

const FILES_TO_COPY = ["main.js", "manifest.json"];

function copyToVault(file) {
	const sourcePath = path.join(ROOT_DIR, file);
	const targetPath = path.join(VAULT_PATH, file);

	if (fs.existsSync(sourcePath)) {
		// 确保目标目录存在
		if (!fs.existsSync(VAULT_PATH)) {
			fs.mkdirSync(VAULT_PATH, { recursive: true });
		}
		fs.copyFileSync(file, targetPath);
		console.log(`Copied ${file}`);
	}
}

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	// 初始构建
	await context.watch();

	// 使用 chokidar 监听文件变化
	const watcher = chokidar.watch(FILES_TO_COPY, {
		persistent: true,
		ignoreInitial: false,
	});

	// 监听文件变化
	watcher.on("all", (event, path) => {
		console.log(`Event: ${event}, Path: ${path}`);
		copyToVault(path);
	});
}
